// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`#validations configSchema 1`] = `
ObjectSchema {
  "_blacklist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "_conditions": Array [],
  "_defaultDefault": [Function],
  "_deps": Array [],
  "_excludedEdges": Array [],
  "_exclusive": Object {},
  "_mutate": undefined,
  "_nodes": Array [
    "css",
    "legacy",
    "plugins",
    "shortcodes",
    "build",
    "server",
    "hooks",
    "debug",
    "srcDir",
    "distDir",
    "rootDir",
    "origin",
  ],
  "_options": Object {
    "abortEarly": true,
    "recursive": true,
  },
  "_type": "object",
  "_typeError": [Function],
  "_whitelist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "fields": Object {
    "build": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "shuffleRequests",
        "numberOfWorkers",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "numberOfWorkers": NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": -1,
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "This controls the number of worker processes spun up during build. It accepts negative numbers to represent the number of cpus minus the given number. Or the total number of processes to spin up. ",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "number",
        },
        "shuffleRequests": BooleanSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": false,
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "If you have some pages that take longer to generate than others, you may want to shuffle your requests so they are spread out more evenly across processes when building.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "css": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": "inline",
      "_deps": Array [],
      "_exclusive": Object {
        "inline-none-file": false,
        "required": true,
      },
      "_label": "How should css found in svelte files be handled? 'inline' emits styles into the head. 'file' adds a file include into the head. 'none' doesn't do anything with the styles.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "debug": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_label": "Offers various levels of debug logging.",
      "_mutate": undefined,
      "_nodes": Array [
        "automagic",
        "build",
        "performance",
        "shortcodes",
        "hooks",
        "stacks",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "automagic": BooleanSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": false,
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Displays settings or actions that are automagically done to help with debugging.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
        "build": BooleanSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": false,
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Displays detailed build information for each worker.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
        "hooks": BooleanSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": false,
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Output details of hook execution in the console.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
        "performance": BooleanSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": false,
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Outputs a detailed speed report on each pageload.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
        "shortcodes": BooleanSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": false,
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Output details of shortcode execution in the console.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
        "stacks": BooleanSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": false,
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Outputs details of stack processing in the console.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "boolean",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "boolean",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "distDir": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": "public",
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "Where should files be written? This represents the \\"root\\" of your site and where your html will be built.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "hooks": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "disable",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "disable": ArraySchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "This is an array of hooks to be excluded from execution. To be clear, this isn't the \\"hook\\" name found in the \\"hookInterface.ts\\" file but instead the name of the system, user, plugin, or route hook that is defined.  For instance if you wanted to by name to prevent the system hook that writes html to the public folder during builds from being run, you would add \\"internalWriteFile\\" to this array.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_subType": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {},
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "_type": "array",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "innerType": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {},
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "array",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "legacy": BooleanSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": false,
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "EXPERIMENTAL: This implementation will not work in all scenarios, may change in the future, or be dropped completely... but Elder.js will attempt to add an IE11/nomodule friendly iife bundle for each component on production rollup builds. Please note, currently shared stores do not work but see this issue: https://github.com/Elderjs/elderjs/issues/44#issue-709580756 and you may need to bring your own polyfills.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "boolean",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "boolean",
    },
    "origin": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": "",
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "The domain your site is hosted on. https://yourdomain.com.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "plugins": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": Object {},
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_label": "Used to define Elder.js plugins.",
      "_mutate": undefined,
      "_nodes": Array [],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {},
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "rootDir": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": "process.cwd()",
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "Here your package.json lives.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "server": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "prefix",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "prefix": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": "",
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "If Elder.js should serve all pages with a prefix.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "shortcodes": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "closePattern",
        "openPattern",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "closePattern": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": "}}",
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "closing pattern for identifying shortcodes in html output.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "openPattern": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_default": "{{",
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Opening pattern for identifying shortcodes in html output.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "srcDir": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": "src",
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "Where Elder.js should find it's expected file structure. If you are using a build step such as typescript on your project, you may need to edit this. ",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
  },
  "tests": Array [],
  "transforms": Array [
    [Function],
  ],
  "type": "object",
}
`;

exports[`#validations hookSchema 1`] = `
ObjectSchema {
  "_blacklist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "_conditions": Array [],
  "_defaultDefault": [Function],
  "_deps": Array [],
  "_excludedEdges": Array [],
  "_exclusive": Object {
    "noUnknown": true,
  },
  "_mutate": undefined,
  "_nodes": Array [
    "$$meta",
    "run",
    "priority",
    "description",
    "name",
    "hook",
  ],
  "_options": Object {
    "abortEarly": true,
    "recursive": true,
    "stripUnknown": true,
  },
  "_type": "object",
  "_typeError": [Function],
  "_whitelist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "fields": Object {
    "$$meta": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "addedBy",
        "type",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "addedBy": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
          },
          "_label": "Where the hook was added from. Defined by Elder.js for debugging.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
        "type": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
          },
          "_label": "What type of hook this is. Defined by Elder.js for debugging.",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
          "type": "string",
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "description": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "required": true,
      },
      "_label": "A description of what the function does.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "hook": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "required": true,
        "valid-hook": false,
      },
      "_label": "The hook the defined \\"run\\" function should be executed on.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "name": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "required": true,
      },
      "_label": "A user friendly name of the function to be run.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "priority": NumberSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": 50,
      "_deps": Array [],
      "_exclusive": Object {
        "integer": false,
        "max": true,
        "min": true,
      },
      "_label": "The priority level a hook should run at. The highest priority is 100 and 1 is the lowest priority.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "number",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
      "type": "number",
    },
    "run": SchemaType {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "defined": true,
        "isFunction": false,
      },
      "_label": "The function to be run on the hook.",
      "_mutate": undefined,
      "_nullable": true,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "mixed",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
      ],
      "transforms": Array [],
      "type": "mixed",
    },
  },
  "tests": Array [
    [Function],
  ],
  "transforms": Array [
    [Function],
  ],
  "type": "object",
}
`;

exports[`#validations pluginSchema 1`] = `
ObjectSchema {
  "_blacklist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "_conditions": Array [],
  "_defaultDefault": [Function],
  "_deps": Array [],
  "_excludedEdges": Array [],
  "_exclusive": Object {},
  "_mutate": undefined,
  "_nodes": Array [
    "shortcodes",
    "config",
    "hooks",
    "routes",
    "init",
    "description",
    "name",
  ],
  "_options": Object {
    "abortEarly": true,
    "recursive": true,
  },
  "_type": "object",
  "_typeError": [Function],
  "_whitelist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "fields": Object {
    "config": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": Object {},
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_label": "(optional) An object of default configs. These will be used when none are set in their elder.config.js.",
      "_mutate": undefined,
      "_nodes": Array [],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {},
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "description": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": "",
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "A description of the plugin.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "hooks": ArraySchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "required": true,
      },
      "_label": "An array of hooks.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_subType": undefined,
      "_type": "array",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "innerType": undefined,
      "tests": Array [
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
      "type": "array",
    },
    "init": SchemaType {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "isFunction": false,
      },
      "_label": "A sync function that handles the plugin init. Receives plugin definition. plugin.settings contains Elder.js config. plugin.config contains plugin config",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "mixed",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
      ],
      "transforms": Array [],
      "type": "mixed",
    },
    "name": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": "",
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "The name of the plugin.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
    "routes": ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": Object {},
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_label": "(optional) Any routes the plugin is adding.",
      "_mutate": undefined,
      "_nodes": Array [],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {},
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "object",
    },
    "shortcodes": ArraySchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": Array [],
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "Array of shortcodes",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_subType": undefined,
      "_type": "array",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "innerType": undefined,
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
      "type": "array",
    },
  },
  "tests": Array [],
  "transforms": Array [
    [Function],
  ],
  "type": "object",
}
`;

exports[`#validations routeSchema 1`] = `
ObjectSchema {
  "_blacklist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "_conditions": Array [],
  "_defaultDefault": [Function],
  "_deps": Array [],
  "_excludedEdges": Array [],
  "_exclusive": Object {},
  "_mutate": undefined,
  "_nodes": Array [
    "data",
    "permalink",
    "all",
    "template",
  ],
  "_options": Object {
    "abortEarly": true,
    "recursive": true,
  },
  "_type": "object",
  "_typeError": [Function],
  "_whitelist": RefSet {
    "list": Set {},
    "refs": Map {},
  },
  "fields": Object {
    "all": SchemaType {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "isFunction": false,
        "required": true,
      },
      "_label": "A sync/async function that returns an array of all of the 'request objects' for this route.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "mixed",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
      ],
      "transforms": Array [],
      "type": "mixed",
    },
    "data": SchemaType {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_default": Object {},
      "_deps": Array [],
      "_exclusive": Object {},
      "_label": "Async/sync function that returns a JS object. Can also be a plain JS object.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "mixed",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [],
      "transforms": Array [],
      "type": "mixed",
    },
    "permalink": SchemaType {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "isFunction": false,
        "required": true,
      },
      "_label": "Sync function that turns request objects from the all() function into permalinks which are relative to the site root",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "mixed",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
        [Function],
      ],
      "transforms": Array [],
      "type": "mixed",
    },
    "template": StringSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_deps": Array [],
      "_exclusive": Object {
        "required": true,
      },
      "_label": "Svelte file for your route. Defaults to RouteName.svelte if not defined.",
      "_mutate": undefined,
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "string",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "tests": Array [
        [Function],
      ],
      "transforms": Array [
        [Function],
      ],
      "type": "string",
    },
  },
  "tests": Array [],
  "transforms": Array [
    [Function],
  ],
  "type": "object",
}
`;
